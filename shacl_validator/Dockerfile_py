# First, build the application in the `/app` directory.
# See `Dockerfile` for details.
FROM ghcr.io/astral-sh/uv:python3.12-bookworm-slim AS builder
ENV UV_COMPILE_BYTECODE=1 UV_LINK_MODE=copy

# Disable Python downloads, because we want to use the system interpreter
# across both images. If using a managed Python version, it needs to be
# copied from the build image into the final image; see `standalone.Dockerfile`
# for an example.
ENV UV_PYTHON_DOWNLOADS=0

# we use a nested directory to avoid the root directory being owned by root
# this is since our application uses a relative path ../ up one and thus 
# we want to keep this seem path consistent
WORKDIR /app/service
COPY shacl_validator_grpc_py /app/service
COPY ../shapes /app/shapes

RUN --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=shacl_validator_grpc_py/uv.lock,target=/app/service/uv.lock \
    --mount=type=bind,source=shacl_validator_grpc_py/pyproject.toml,target=/app/service/pyproject.toml \
    uv sync --locked --no-install-project --no-dev
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --locked --no-dev

# Then, use a final image without uv
FROM python:3.12-slim-bookworm
# It is important to use the image that matches the builder, as the path to the
# Python executable must be the same, e.g., using `python:3.11-slim-bookworm`
# will fail.

# Copy the application from the builder
COPY --from=builder --chown=app:app /app /app

# Place executables in the environment at the front of the path
ENV PATH="/app/service/.venv/bin:$PATH"

CMD ["python", "/app/service/server.py"]
