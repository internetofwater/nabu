// Code generated by tygo. DO NOT EDIT.

//////////
// source: stats.go

/**
 * The status of the shacl validation
 */
export type ShaclStatus = string;
/**
 * Shacl validation was skipped and was not run
 */
export const ShaclSkipped: ShaclStatus = "skipped";
/**
 * The triples passed into shacl validation were invalid
 */
export const ShaclInvalid: ShaclStatus = "invalid";
/**
 * The triples passed into shacl validation were valid
 */
export const ShaclValid: ShaclStatus = "valid";
/**
 * An error for a particular URL in a sitemap
 */
export interface UrlCrawlError {
  /**
   * The URL that failed
   */
  Url: string;
  /**
   * The http status code of the fetched Url
   */
  Status: number /* int */;
  /**
   * a natural language error message describing the error
   */
  Message: string;
}
/**
 * A warning for a particular URL in a sitemap
 */
export interface ShaclInfo {
  /**
   * THe url against which shacl validation was run
   */
  Url: string;
  /**
   * the status of the shacl validation operation itself
   */
  ShaclStatus: ShaclStatus;
  /**
   * the shacl validation message
   */
  ShaclValidationMessage: string;
}
export interface WarningReport {
  /**
   * The number of sites that had warnings
   * This may be much greater than the data
   * contained in CrawlWarnings given the fact that
   * we may abbreviate our shacl messages to reduce
   * verbosity
   */
  TotalShaclFailures: number /* int */;
  /**
   * Warnings about sites that were harvested
   */
  ShaclWarnings: ShaclInfo[];
}
/**
 * Crawl stats for a particular sitemap
 */
export interface SitemapCrawlStats {
  /**
   * The link to the sitemap itself, containing all
   * the sites that were harvested
   * This allows a client to inspect the sitemap
   * without needing to keep it all in this payload
   */
  SitemapSourceLink: string;
  /**
   * Metadata about why a sitemap failed to be harvested
   */
  CrawlFailures: UrlCrawlError[];
  /**
   * Metadata about shacl validation warnings
   */
  WarningStats: WarningReport;
  /**
   * The number of seconds it took to crawl the sitemap
   */
  SecondsToComplete: number /* float64 */;
  /**
   * The name of the sitemap in the sitemap index
   */
  SitemapName: string;
  /**
   * The number of sites that were successfully crawled and stored
   */
  SitesHarvested: number /* int */;
  /**
   * The number of total sites in the sitemap
   */
  SitesInSitemap: number /* int */;
}
/**
 * A sitemap index is just a list of sitemaps and thus
 * its status is just the status of each sitemap
 */
export type SitemapIndexCrawlStats = SitemapCrawlStats[];
